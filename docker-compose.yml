version: '3.8'



services:
  postgres_db:
    image: postgres
    container_name: postgres_db

    env_file:
      - ./DockerFiles/posgress/db_login.env

    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"


    volumes:
    - type: volume
      source: db_data
      target: /var/lib/postgresql/data
    - type: bind
      source: ./DockerFiles/posgress/db_init_scripts
      target: /docker-entrypoint-initdb.d

    networks:
      db_network:

    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host

    restart: unless-stopped


  api_server:
    container_name: api_server

    build:
      context: ./ServerApi
      dockerfile: ./Dockerfile

    env_file:
      - ./DockerFiles/posgress/db_login.env


    volumes:
    - type: bind
      source: ./save_data/run
      target: /runvol

    - type: volume
      source: to_send
      target: /send

    networks:
      db_network:
      frontend:

    depends_on:
      - postgres_db

    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host

    restart: unless-stopped

  docker_manager:
    container_name: docker_manager

    build:
      context: ./Docker_manager
      dockerfile: Dockerfile

    env_file:
      - ./DockerFiles/posgress/db_login.env
      - ./DockerFiles/email_login.env

    environment:
      SAVE_DATA_SYS_PATH: $PWD/save_data

    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
    - type: bind
      source: ./save_data
      target: /save_data
    - type: bind
      source: ./Docker_manager/RUNTYPES
      target: /runtypes
    - type: volume
      source: to_send
      target: /send

    networks:
      db_network:
      backend:

    depends_on:
      - postgres_db

    restart: unless-stopped


  # https://github.com/mikael2/payara-postgres-nginx/
  nginx:
    container_name: nginx

    build:
      context: ./DockerFiles/nginx_certbot
      dockerfile: Dockerfile




    volumes:
      - type: volume
        source: nginx_data
        target: /etc/letsencrypt

    env_file:
      - ./DockerFiles/nginx_certbot/nginx_cerbot.env

    logging:
      options:
        max-size: "50m"
        max-file: "3"

    ports:
      - "80:80"
      - "443:443"

    networks:
      frontend:

    depends_on:
      - api_server

    restart: unless-stopped



networks:
  db_network:
    internal: true


  frontend:
  backend:
  ticketNetwork:
    external: true

volumes:
  db_data:
  nginx_data:
  to_send: